import asyncio
import os
import requests
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

BOT_TOKEN = os.getenv("BOT_TOKEN", "8146086235:AAFltQPui1QuiEZQyJBL7AowRDzFAvwmFvU")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://nalchik-map-production.up.railway.app")
API_URL = os.getenv("API_URL", "https://nalchik-map-production.up.railway.app")
ADMIN_ID = int(os.getenv("ADMIN_ID", "1118374415"))

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(lambda message: message.text == "/start")
async def handle_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "‚Äî"

    try:
        response = requests.get(f"{API_URL}/check_access", params={"user_id": user_id})
        access = response.json().get("access", False)
    except:
        access = False

    if access:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]
        ])
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à user_id: {user_id}", reply_markup=kb)
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://t.me/YourPaymentBot")]
        ])
        await message.answer(
            f"<b>üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n–í–∞—à user_id: {user_id}",
            reply_markup=kb
        )

@dp.message(lambda message: message.text.startswith("/give"))
async def give_access(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    parts = message.text.split()
    if len(parts) < 2:
        return await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /give <user_id>")

    user_id = parts[1]
    username = "‚Äî"
    expires = (datetime.now() + timedelta(days=30)).isoformat()

    try:
        response = requests.post(f"{API_URL}/set_access", json={
            "user_id": user_id,
            "username": username,
            "expires_at": expires
        })
        if response.status_code == 200:
            await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ {expires[:10]}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
