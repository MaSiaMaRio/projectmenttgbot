import asyncio
import os
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

BOT_TOKEN = os.getenv("BOT_TOKEN", "8146086235:AAFltQPui1QuiEZQyJBL7AowRDzFAvwmFvU")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://nalchik-map-production.up.railway.app")
API_URL = os.getenv("API_URL", "https://nalchik-map-production.up.railway.app")  # –¥–ª—è check_access

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=MemoryStorage())

@dp.message()
async def handle_message(message: types.Message):
    if message.text == "/start":
        user_id = message.from_user.id
        username = message.from_user.username or "‚Äî"

        try:
            response = requests.get(f"{API_URL}/check_access", params={"user_id": user_id})
            access = response.json().get("access", False)
        except:
            access = False

        if access:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]
            ])
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç—É üëá", reply_markup=kb)
        else:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://t.me/YourPaymentBot")]
            ])
            await message.answer(
                """<b>üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.""",
                reply_markup=kb
            )

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
